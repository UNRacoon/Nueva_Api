{"version":3,"sources":["../src/gateway.js"],"names":["ApolloGateway","require","ApolloServer","express","dotenv","fs","https","config","uri","process","env","URI","ssl","port","hostname","gateway","serviceList","name","url","__exposeQueryPlanExperimental","apollo","engine","playground","subscriptions","app","applyMiddleware","server","createServer","key","readFileSync","cert","listen","console","log","graphqlPath"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,OAAO,CAAC,iBAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAmBD,OAAO,CAAC,uBAAD,CAAhC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,OAAD,CAArB;;AAEAG,MAAM,CAACG,MAAP;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,GAAxB;AAEA,MAAMJ,MAAM,GAAG;AAAEK,EAAAA,GAAG,EAAE,IAAP;AAAaC,EAAAA,IAAI,EAAE,IAAnB;AAAyBC,EAAAA,QAAQ,EAAE;AAAnC,CAAf;AAEA,MAAMC,OAAO,GAAG,IAAIf,aAAJ,CAAkB;AAC9BgB,EAAAA,WAAW,EAAE;AACT;AACR;AACA;AACA;AACA;AACA;AACQ;AAAEC,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,GAAG,EAAG;AAA1B,GAPS,CADiB;AAS3B;AACHC,EAAAA,6BAA6B,EAAE;AAVD,CAAlB,CAAhB;AAcA,MAAMC,MAAM,GAAG,IAAIlB,YAAJ,CAAiB;AAC5Ba,EAAAA,OAD4B;AAE5BM,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,UAAU,EAAE,IAHgB;AAI5BC,EAAAA,aAAa,EAAE;AAJa,CAAjB,CAAf;AAOA,MAAMC,GAAG,GAAGrB,OAAO,EAAnB;AACAiB,MAAM,CAACK,eAAP,CAAuB;AAAED,EAAAA;AAAF,CAAvB;AAEA,IAAIE,MAAM,GAAIpB,KAAK,CAACqB,YAAN,CACV;AACIC,EAAAA,GAAG,EAAEvB,EAAE,CAACwB,YAAH,CAAiB,iBAAjB,CADT;AAEIC,EAAAA,IAAI,EAAEzB,EAAE,CAACwB,YAAH,CAAiB,iBAAjB;AAFV,CADU,EAKVL,GALU,CAAd;AAQAE,MAAM,CAACK,MAAP,CAAc;AAAElB,EAAAA,IAAI,EAAEN,MAAM,CAACM;AAAf,CAAd,EAAqC,MACjCmB,OAAO,CAACC,GAAR,CACI,oBADJ,EAEK,OAAM1B,MAAM,CAACK,GAAP,GAAa,GAAb,GAAmB,EAAG,MAAKL,MAAM,CAACO,QAAS,IAAGP,MAAM,CAACM,IAAK,GAC7DO,MAAM,CAACc,WACV,EAJL,CADJ","sourcesContent":["const { ApolloGateway } = require('@apollo/gateway');\r\nconst { ApolloServer } = require('apollo-server-express');\r\nconst express = require('express') ;\r\nconst dotenv = require('dotenv');\r\nconst fs = require('fs');\r\nconst https = require('https');\r\n\r\ndotenv.config();\r\n\r\nconst uri = process.env.URI;\r\n\r\nconst config = { ssl: true, port: 5000, hostname: \"localhost\" };\r\n\r\nconst gateway = new ApolloGateway({\r\n    serviceList: [\r\n        /*{ name: \"Exams\", url: `http://${uri}:2001` },\r\n        { name: \"Vocabulary\", url: `http://${uri}:2002` },\r\n        { name: \"Niveles\", url: `http://${uri}:2003` },\r\n        { name: \"Login\", url: `http://${uri}:2004` },\r\n        { name: \"Foro\", url: `http://${uri}:2005` },\r\n        { name: \"Soporte\", url: `http://${uri}:2006` },*/\r\n        { name: \"Perfiles\", url: `http://localhost:2007` },\r\n    ], //Aqui se agregan los microcervicios con puertos diferentes 5001, 5002, 5003... y se crea su respectiva carpeta en services\r\n    __exposeQueryPlanExperimental: true,\r\n});\r\n\r\n\r\nconst apollo = new ApolloServer({\r\n    gateway,\r\n    engine: false,\r\n    playground: true,\r\n    subscriptions: false,\r\n});\r\n\r\nconst app = express();\r\napollo.applyMiddleware({ app });\r\n\r\nlet server = (https.createServer(\r\n    {\r\n        key: fs.readFileSync(`./localhost.key`),\r\n        cert: fs.readFileSync(`./localhost.crt`),\r\n    },\r\n    app\r\n));\r\n\r\nserver.listen({ port: config.port }, () =>\r\n    console.log(\r\n        \"ðŸš€ Server ready at\",\r\n        `http${config.ssl ? \"s\" : \"\"}://${config.hostname}:${config.port}${\r\n            apollo.graphqlPath\r\n        }`\r\n    )\r\n);\r\n"],"file":"gateway.js"}