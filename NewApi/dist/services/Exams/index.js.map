{"version":3,"sources":["../../../src/services/Exams/index.js"],"names":["ApolloServer","buildFederatedSchema","typeDefs","resolvers","server","schema","listen","port","then","url","console","log"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC5BK,EAAAA,MAAM,EAAEJ,oBAAoB,CAAC,CACzB;AACIC,IAAAA,QADJ;AAEIC,IAAAA;AAFJ,GADyB,CAAD;AADA,CAAjB,CAAf;AASAC,MAAM,CAACE,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAd,EAA8BC,IAA9B,CAAmC,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBF,GAAI,EAAtC;AACH,CAFD","sourcesContent":["import { ApolloServer } from \"apollo-server\";\r\nimport { buildFederatedSchema } from \"@apollo/federation\";\r\nimport typeDefs from \"./typeDefs\";\r\nimport resolvers from \"./resolvers\";\r\n\r\nconst server = new ApolloServer({\r\n    schema: buildFederatedSchema([\r\n        {\r\n            typeDefs,\r\n            resolvers,\r\n        },\r\n    ]),\r\n});\r\n\r\nserver.listen({ port: 3000 }).then(({ url }) => {\r\n    console.log(`ğŸš€ Server ready at ${url}`);\r\n});"],"file":"index.js"}